                  Inversion Count and Selection Algorithms Assignment

Ans 1.


import java.util.Random;

public class Quickselect {
    
    public static void main(String[] args) {
        int[] arr1 = {1, 3, 2, 4, 5, 6, 7};
        int k1 = 3;
        System.out.println(findKthLargest(arr1, k1)); // Output: 5
        
        int[] arr2 = {4, 3, 3, 2, 1};
        int k2 = 4;
        System.out.println(findKthLargest(arr2, k2)); // Output: 2
    }
    
    public static int findKthLargest(int[] nums, int k) {
        // Convert k to index for 0-based array
        k = nums.length - k;
        return quickSelect(nums, 0, nums.length - 1, k);
    }
    
    private static int quickSelect(int[] nums, int left, int right, int k) {
        if (left == right) {
            return nums[left];
        }
        
        // Randomly choose a pivot index
        Random rand = new Random();
        int pivotIndex = left + rand.nextInt(right - left + 1);
        pivotIndex = partition(nums, left, right, pivotIndex);
        
        if (k == pivotIndex) {
            return nums[k];
        } else if (k < pivotIndex) {
            return quickSelect(nums, left, pivotIndex - 1, k);
        } else {
            return quickSelect(nums, pivotIndex + 1, right, k);
        }
    }
    
    private static int partition(int[] nums, int left, int right, int pivotIndex) {
        int pivotValue = nums[pivotIndex];
        // Move pivot to end
        swap(nums, pivotIndex, right);
        int storeIndex = left;
        
        // Move all smaller elements to the left of the pivot
        for (int i = left; i < right; i++) {
            if (nums[i] < pivotValue) {
                swap(nums, storeIndex, i);
                storeIndex++;
            }
        }
        
        // Move pivot to its final place
        swap(nums, storeIndex, right);
        return storeIndex;
    }
    
    private static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}



                              Greedy algorithm Assignment



Ans 1.

import java.util.Arrays;

public class MinSumProduct {
    public static void main(String[] args) {
        int[] a = {1, 2, -3};
        int[] b = {-2, 3, -5};
        int k = 5;
        System.out.println(findMinSumProduct(a, b, k));
    }

    public static int findMinSumProduct(int[] a, int[] b, int k) {
        int n = a.length;
        int[] diff = new int[n];
        int maxDiffIndex = 0;

        for (int i = 0; i < n; i++) {
            diff[i] = a[i] * b[i];
        }

        for (int i = 0; i < n; i++) {
            diff[i] = -b[i];  // Impact of incrementing a[i] by 2
        }

        Arrays.sort(diff);
        int totalChange = 0;

        for (int i = 0; i < k; i++) {
            totalChange += diff[i];
        }

        int sumProduct = 0;
        for (int i = 0; i < n; i++) {
            sumProduct += a[i] * b[i];
        }

        return sumProduct + totalChange * 2;
    }
}


Ans 2.

import java.util.Arrays;
import java.util.Comparator;

public class ActivitySelection {
    public static void main(String[] args) {
        int[] start = {1, 3, 0, 5, 8, 5};
        int[] finish = {2, 4, 6, 7, 9, 9};
        System.out.println(maxActivities(start, finish));
    }

    public static int maxActivities(int[] start, int[] finish) {
        int n = start.length;
        int[][] activities = new int[n][2];

        for (int i = 0; i < n; i++) {
            activities[i][0] = start[i];
            activities[i][1] = finish[i];
        }

        Arrays.sort(activities, Comparator.comparingInt(a -> a[1]));

        int count = 1;
        int lastFinish = activities[0][1];

        for (int i = 1; i < n; i++) {
            if (activities[i][0] >= lastFinish) {
                count++;
                lastFinish = activities[i][1];
            }
        }

        return count;
    }
}


Ans 3.


public class GasStation {
    public static void main(String[] args) {
        int[] gas = {1, 2, 3, 4, 5};
        int[] cost = {3, 4, 5, 1, 2};
        System.out.println(canCompleteCircuit(gas, cost));
    }

    public static int canCompleteCircuit(int[] gas, int[] cost) {
        int totalGas = 0, totalCost = 0, currentGas = 0, startIndex = 0;

        for (int i = 0; i < gas.length; i++) {
            totalGas += gas[i];
            totalCost += cost[i];
            currentGas += gas[i] - cost[i];

            if (currentGas < 0) {
                startIndex = i + 1;
                currentGas = 0;
            }
        }

        return totalGas >= totalCost ? startIndex : -1;
    }
}



Ans 4.

public class Flowerbed {
    public static void main(String[] args) {
        int[] flowerbed = {1, 0, 0, 0, 1};
        int n = 1;
        System.out.println(canPlaceFlowers(flowerbed, n));
    }

    public static boolean canPlaceFlowers(int[] flowerbed, int n) {
        int count = 0;
        int i = 0;

        while (i < flowerbed.length) {
            if (flowerbed[i] == 0) {
                if ((i == 0 || flowerbed[i - 1] == 0) &&
                    (i == flowerbed.length - 1 || flowerbed[i + 1] == 0)) {
                    flowerbed[i] = 1;
                    count++;
                }
            }
            i++;
        }

        return count >= n;
    }
}



Ans 5.

import java.util.Arrays;
import java.util.Comparator;

public class IntervalRemoval {
    public static void main(String[] args) {
        int[][] intervals = {{1, 2}, {2, 3}, {3, 4}, {1, 3}};
        System.out.println(minRemoveIntervals(intervals));
    }

    public static int minRemoveIntervals(int[][] intervals) {
        if (intervals.length == 0) return 0;

        Arrays.sort(intervals, Comparator.comparingInt(a -> a[1]));
        int count = 0;
        int end = intervals[0][1];

        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] < end) {
                count++;
            } else {
                end = intervals[i][1];
            }
        }

        return count;
    }
}



                      Divide and Conquer Assignment



Ans 1.

public class SortSwappedArray {
    public static void main(String[] args) {
        int[] arr = {3, 8, 6, 7, 5, 9, 10};
        sortSwappedArray(arr);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }

    public static void sortSwappedArray(int[] arr) {
        int n = arr.length;
        int first = -1, second = -1;
        
        // Step 1: Find the two swapped elements
        for (int i = 1; i < n; i++) {
            if (arr[i] < arr[i - 1]) {
                if (first == -1) {
                    first = i - 1;
                }
                second = i;
            }
        }

        // Step 2: Swap the elements back to their correct positions
        if (first != -1 && second != -1) {
            int temp = arr[first];
            arr[first] = arr[second];
            arr[second] = temp;
        }
    }
}


Ans 2.

public class SegregateNegativePositive {
    public static void main(String[] args) {
        int[] arr = {19, -20, 7, -4, -13, 11, -5, 3};
        segregate(arr);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }

    public static void segregate(int[] arr) {
        int left = 0, right = arr.length - 1;

        while (left <= right) {
            if (arr[left] < 0) {
                left++;
            } else if (arr[right] >= 0) {
                right--;
            } else {
                // Swap negative and positive numbers
                int temp = arr[left];
                arr[left] = arr[right];
                arr[right] = temp;
                left++;
                right--;
            }
        }
    }
}


Ans 3.

import java.util.ArrayList;
import java.util.List;

public class SegregateNegativePositivePreserveOrder {
    public static void main(String[] args) {
        int[] arr = {19, -20, 7, -4, -13, 11, -5, 3};
        int[] result = segregatePreserveOrder(arr);
        for (int num : result) {
            System.out.print(num + " ");
        }
    }

    public static int[] segregatePreserveOrder(int[] arr) {
        List<Integer> negatives = new ArrayList<>();
        List<Integer> positives = new ArrayList<>();

        for (int num : arr) {
            if (num < 0) {
                negatives.add(num);
            } else {
                positives.add(num);
            }
        }

        negatives.addAll(positives);
        return negatives.stream().mapToInt(i -> i).toArray();
    }
}



Ans 4.


import java.util.Arrays;
import java.util.Collections;

public class PermuteArrays {
    public static void main(String[] args) {
        int[] a = {2, 1, 3};
        int[] b = {7, 8, 9};
        int k = 10;
        System.out.println(canPermuteToMeetCondition(a, b, k) ? "Yes" : "No");
    }

    public static boolean canPermuteToMeetCondition(int[] a, int[] b, int k) {
        Arrays.sort(a);
        Integer[] bSorted = Arrays.stream(b).boxed().toArray(Integer[]::new);
        Arrays.sort(bSorted, Collections.reverseOrder());

        for (int i = 0; i < a.length; i++) {
            if (a[i] + bSorted[i] < k) {
                return false;
            }
        }
        return true;
    }
}



Ans 5.

import java.util.Arrays;
import java.util.Comparator;

public class IntervalIntersection {
    public static void main(String[] args) {
        int[][] intervals = {{1, 3}, {5, 7}, {2, 4}, {6, 8}};
        System.out.println(hasIntersection(intervals) ? "Yes" : "No");
    }

    public static boolean hasIntersection(int[][] intervals) {
        Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));

        for (int i = 0; i < intervals.length - 1; i++) {
            if (intervals[i][1] > intervals[i + 1][0]) {
                return true;
            }
        }

        return false;
    }
}
